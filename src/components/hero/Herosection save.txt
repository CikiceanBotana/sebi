'use client';

import React, { useState, useEffect } from 'react';
import dynamic from 'next/dynamic';

const SimpleScene = dynamic(() => import('../three/simple-scene'), {
  ssr: false,
  loading: () => (
    <div className="flex items-center justify-center w-full h-full">
      <div className="text-[#FAFAFA] opacity-50">Loading 3D Model...</div>
    </div>
  ),
});

interface StatsProps {
  label: string;
  value: string | number;
  bassValue: number;
}

const Stats: React.FC<StatsProps> = ({ label, value, bassValue }) => {
  const [position, setPosition] = useState({ x: 0, y: 0 });

  useEffect(() => {
    let animationFrame: number;

    const updatePosition = () => {
      const time = Date.now() / 50;
      const vibrationAmount = bassValue * 10;
      setPosition({
        x: Math.sin(time) * vibrationAmount,
        y: Math.cos(time) * vibrationAmount
      });
      animationFrame = requestAnimationFrame(updatePosition);
    };

    animationFrame = requestAnimationFrame(updatePosition);
    return () => cancelAnimationFrame(animationFrame);
  }, [bassValue]);

  return (
    <div 
      className="flex flex-col mb-12 items-center transition-transform duration-75 group"
      style={{
        transform: `translate(${position.x}px, ${position.y}px)`
      }}
    >
      <p className="text-[#FAFAFA] font-lacquer text-2xl mb-2 text-center">{label}</p>
      <span className="text-[#FAFAFA] font-lacquer text-5xl text-center">{value}</span>
    </div>
  );
};

const HeroSection: React.FC = () => {
  const [bassValue, setBassValue] = useState(0);
  const [titlePosition, setTitlePosition] = useState({ x: 0, y: 0 });

  useEffect(() => {
    let animationFrame: number;

    const updatePosition = () => {
      const time = Date.now() / 50;
      const vibrationAmount = bassValue * 5;
      setTitlePosition({
        x: Math.sin(time) * vibrationAmount,
        y: Math.cos(time) * vibrationAmount
      });
      animationFrame = requestAnimationFrame(updatePosition);
    };

    animationFrame = requestAnimationFrame(updatePosition);
    return () => cancelAnimationFrame(animationFrame);
  }, [bassValue]);

  const handleBassUpdate = (value: number) => {
    setBassValue(value);
  };

  return (
    <div className="relative flex flex-row w-full min-h-screen px-8 -mt-8 overflow-visible">
      {/* Left Section - Hero Header (25%) */}
      <div className="w-1/4 flex flex-col items-start justify-center -mt-24">
        <h1 
          className="text-[#FAFAFA] font-lacquer text-8xl leading-tight transition-transform duration-75 group"
          style={{
            transform: `translate(${titlePosition.x}px, ${titlePosition.y}px)`
          }}
        >
          <span className="block text-[#FAFAFA]">
            Arta Din
          </span>
          <span className="block text-[#FAFAFA]">
            Cioburi Ratacite
          </span>
        </h1>
        <div className="w-full flex justify-center">
          <button 
            className="mt-8 px-12 py-3 bg-[#9F1E07] border-2 border-[#FAFAFA] font-faculty text-xl rounded-lg 
                     transition-all duration-300 ease-in-out
                     group hover:bg-[#FAFAFA] hover:border-[#9F1E07]"
          >
            <span className="bg-gradient-to-r from-[#047A6E] via-[#047A6E] to-[#9F1E07] bg-clip-text text-[#FAFAFA] group-hover:text-transparent transition-colors duration-300">
              Magazin
            </span>
          </button>
        </div>
      </div>

      {/* Middle Section - 3D Model Space (50%) */}
      <div className="w-1/2 flex items-center justify-center overflow-visible">
        <div 
          className="w-full h-full relative overflow-visible transition-transform duration-75"
          style={{
            transform: `scale(${1 + bassValue * 0.1})`
          }}
        >
          <SimpleScene bassValue={bassValue} />
        </div>
      </div>

      {/* Right Section - Stats (25%) */}
      <div className="w-1/4 flex flex-col justify-center items-center -mt-20">
        <div className="flex flex-col items-center space-y-8 -ml-12">
          <Stats 
            label="Arta Vanduta" 
            value="157" 
            bassValue={bassValue}
          />
          <Stats 
            label="Cumparatori" 
            value="89" 
            bassValue={bassValue}
          />
          <Stats 
            label="Sticle Reciclate" 
            value="1,234" 
            bassValue={bassValue}
          />
        </div>
      </div>
    </div>
  );
};

export default HeroSection;